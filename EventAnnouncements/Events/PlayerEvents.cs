using EventAnnouncements.API;
using EventAnnouncements.API.Entities;
using EventAnnouncements.API.Enums;
using Exiled.Events.EventArgs;
using Exiled.Events.Handlers;
using System.Collections.Generic;

namespace EventAnnouncements.Events
{
    internal class PlayerEvents
    {
        private readonly Dictionary<PlayerEventType, Announcement> _announcements;

        public PlayerEvents(Dictionary<PlayerEventType, Announcement> announcements)
        {
            _announcements = announcements;
        }

        public void RegisterEvents()
        {
            Player.ActivatingGenerator += OnActivatingGenerator;
            Player.ActivatingWarheadPanel += OnActivatingWarheadPanel;
            Player.ActivatingWorkstation += OnActivatingWorkstation;
            Player.AimingDownSight += OnAimingDownSight;
            Player.Banned += OnBanned;
            Player.Banning += OnBanning;
            Player.CancellingItemUse += OnCancellingItemUse;
            Player.ChangingGroup += OnChangingGroup;
            Player.ChangingIntercomMuteStatus += OnChangingIntercomMuteStatus;
            Player.ChangingItem += OnChangingItem;
            Player.ChangingMicroHIDState += OnChangingMicroHIDState;
            Player.ChangingMoveState += OnChangingMoveState;
            Player.ChangingMuteStatus += OnChangingMuteStatus;
            Player.ChangingRadioPreset += OnChangingRadioPreset;
            Player.ChangingRole += OnChangingRole;
            Player.ChangingSpectatedPlayer += OnChangingSpectatedPlayer;
            Player.ClosingGenerator += OnClosingGenerator;
            Player.DamagingShootingTarget += OnDamagingShootingTarget;
            Player.DeactivatingWorkstation += OnDeactivatingWorkstation;
            Player.Destroying += OnDestroying;
            Player.Died += OnDied;
            Player.DroppingAmmo += OnDroppingAmmo;
            Player.DroppingItem += OnDroppingItem;
            Player.DroppingNull += OnDroppingNull;
            Player.DryfiringWeapon += OnDryfiringWeapon;
            Player.Dying += OnDying;
            Player.EnteringFemurBreaker += OnEnteringFemurBreaker;
            Player.EnteringPocketDimension += OnEnteringPocketDimension;
            Player.Escaping += OnEscaping;
            Player.EscapingPocketDimension += OnEscapingPocketDimension;
            Player.FailingEscapePocketDimension += OnFailingEscapingPocketDimension;
            Player.FlippingCoin += OnFlippingCoin;
            Player.Handcuffing += OnHandcuffing;
            Player.Hurting += OnHurting;
            Player.Interacted += OnInteracted;
            Player.InteractingDoor += OnInteractingDoor;
            Player.InteractingElevator += OnInteractingElevator;
            Player.InteractingLocker += OnInteractingLocker;
            Player.InteractingScp330 += OnInteractingScp330;
            Player.InteractingShootingTarget += OnInteractingShootingTarget;
            Player.IntercomSpeaking += OnIntercomSpeaking;
            Player.Joined += OnJoined;
            Player.Jumping += OnJumping;
            Player.Kicked += OnKicked;
            Player.Kicking += OnKicking;
            Player.Landing += OnLanding;
            Player.Left += OnLeft;
            Player.MakingNoise += OnMakingNoise;
            Player.OpeningGenerator += OnOpeningGenerator;
            Player.PickingUpAmmo += OnPickingUpAmmo;
            Player.PickingUpArmor += OnPickingUpArmor;
            Player.PickingUpItem += OnPickingUpItem;
            Player.PickingUpScp330 += OnPickingUpScp330;
            Player.PlayerDamageWindow += OnPlayerDamageWindow;
            Player.PreAuthenticating += OnPreAuthenticating;
            Player.ProcessingHotkey += OnProcessingHotkey;
            Player.ReceivingEffect += OnReceivingEffect;
            Player.ReloadingWeapon += OnReloadingWeapon;
            Player.RemovingHandcuffs += OnRemovingHandcuffs;
            Player.SearchingPickup += OnSearchingPickup;
            Player.Shooting += OnShooting;
            Player.Shot += OnShot;
            Player.Spawned += OnSpawned;
            Player.Spawning += OnSpawning;
            Player.SpawningRagdoll += OnSpawningRagdoll;
            Player.StoppingGenerator += OnStoppingGenerator;
            Player.ThrowingItem += OnThrowingItem;
            Player.TogglingFlashlight += OnToggleFlashlight;
            Player.TogglingNoClip += OnTogglingNoClip;
            Player.TogglingWeaponFlashlight += OnTogglingWeaponFlashlight;
            Player.Transmitting += OnTransmitting;
            Player.TriggeringTesla += OnTriggeringTesla;
            Player.UnloadingWeapon += OnUnloadingWeapon;
            Player.UnlockingGenerator += OnUnlockingGenerator;
            Player.UsedItem += OnUsedItem;
            Player.UsingItem += OnUsingItem;
            Player.UsingMicroHIDEnergy += OnUsingMicroHIDEnergy;
            Player.UsingRadioBattery += OnUsingRadioBattery;
            Player.Verified += OnVerified;
            Player.VoiceChatting += OnVoiceChatting;
            Player.WalkingOnSinkhole += OnWalkingOnSinkhole;
            Player.WalkingOnTantrum += OnWalkingOnTantrum;
        }

        public void UnregisterEvents()
        {
            Player.ActivatingGenerator -= OnActivatingGenerator;
            Player.ActivatingWarheadPanel -= OnActivatingWarheadPanel;
            Player.ActivatingWorkstation -= OnActivatingWorkstation;
            Player.AimingDownSight -= OnAimingDownSight;
            Player.Banned -= OnBanned;
            Player.Banning -= OnBanning;
            Player.CancellingItemUse -= OnCancellingItemUse;
            Player.ChangingGroup -= OnChangingGroup;
            Player.ChangingIntercomMuteStatus -= OnChangingIntercomMuteStatus;
            Player.ChangingItem -= OnChangingItem;
            Player.ChangingMicroHIDState -= OnChangingMicroHIDState;
            Player.ChangingMoveState -= OnChangingMoveState;
            Player.ChangingMuteStatus -= OnChangingMuteStatus;
            Player.ChangingRadioPreset -= OnChangingRadioPreset;
            Player.ChangingRole -= OnChangingRole;
            Player.ChangingSpectatedPlayer -= OnChangingSpectatedPlayer;
            Player.ClosingGenerator -= OnClosingGenerator;
            Player.DamagingShootingTarget -= OnDamagingShootingTarget;
            Player.DeactivatingWorkstation -= OnDeactivatingWorkstation;
            Player.Destroying -= OnDestroying;
            Player.Died -= OnDied;
            Player.DroppingAmmo -= OnDroppingAmmo;
            Player.DroppingItem -= OnDroppingItem;
            Player.DroppingNull -= OnDroppingNull;
            Player.DryfiringWeapon -= OnDryfiringWeapon;
            Player.Dying -= OnDying;
            Player.EnteringFemurBreaker -= OnEnteringFemurBreaker;
            Player.EnteringPocketDimension -= OnEnteringPocketDimension;
            Player.Escaping -= OnEscaping;
            Player.EscapingPocketDimension -= OnEscapingPocketDimension;
            Player.FailingEscapePocketDimension -= OnFailingEscapingPocketDimension;
            Player.FlippingCoin -= OnFlippingCoin;
            Player.Handcuffing -= OnHandcuffing;
            Player.Hurting -= OnHurting;
            Player.Interacted -= OnInteracted;
            Player.InteractingDoor -= OnInteractingDoor;
            Player.InteractingElevator -= OnInteractingElevator;
            Player.InteractingLocker -= OnInteractingLocker;
            Player.InteractingScp330 -= OnInteractingScp330;
            Player.InteractingShootingTarget -= OnInteractingShootingTarget;
            Player.IntercomSpeaking -= OnIntercomSpeaking;
            Player.Joined -= OnJoined;
            Player.Jumping -= OnJumping;
            Player.Kicked -= OnKicked;
            Player.Kicking -= OnKicking;
            Player.Landing -= OnLanding;
            Player.Left -= OnLeft;
            Player.MakingNoise -= OnMakingNoise;
            Player.OpeningGenerator -= OnOpeningGenerator;
            Player.PickingUpAmmo -= OnPickingUpAmmo;
            Player.PickingUpArmor -= OnPickingUpArmor;
            Player.PickingUpItem -= OnPickingUpItem;
            Player.PickingUpScp330 -= OnPickingUpScp330;
            Player.PlayerDamageWindow -= OnPlayerDamageWindow;
            Player.PreAuthenticating -= OnPreAuthenticating;
            Player.ProcessingHotkey -= OnProcessingHotkey;
            Player.ReceivingEffect -= OnReceivingEffect;
            Player.ReloadingWeapon -= OnReloadingWeapon;
            Player.RemovingHandcuffs -= OnRemovingHandcuffs;
            Player.SearchingPickup -= OnSearchingPickup;
            Player.Shooting -= OnShooting;
            Player.Shot -= OnShot;
            Player.Spawned -= OnSpawned;
            Player.Spawning -= OnSpawning;
            Player.SpawningRagdoll -= OnSpawningRagdoll;
            Player.StoppingGenerator -= OnStoppingGenerator;
            Player.ThrowingItem -= OnThrowingItem;
            Player.TogglingFlashlight -= OnToggleFlashlight;
            Player.TogglingNoClip -= OnTogglingNoClip;
            Player.TogglingWeaponFlashlight -= OnTogglingWeaponFlashlight;
            Player.Transmitting -= OnTransmitting;
            Player.TriggeringTesla -= OnTriggeringTesla;
            Player.UnloadingWeapon -= OnUnloadingWeapon;
            Player.UnlockingGenerator -= OnUnlockingGenerator;
            Player.UsedItem -= OnUsedItem;
            Player.UsingItem -= OnUsingItem;
            Player.UsingMicroHIDEnergy -= OnUsingMicroHIDEnergy;
            Player.UsingRadioBattery -= OnUsingRadioBattery;
            Player.Verified -= OnVerified;
            Player.VoiceChatting -= OnVoiceChatting;
            Player.WalkingOnSinkhole -= OnWalkingOnSinkhole;
            Player.WalkingOnTantrum -= OnWalkingOnTantrum;
        }

        private void OnActivatingGenerator(ActivatingGeneratorEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ActivatingGenerator);
        private void OnActivatingWarheadPanel(ActivatingWarheadPanelEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ActivatingWarheadPanel);
        private void OnActivatingWorkstation(ActivatingWorkstationEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ActivatingWorkstation);
        private void OnAimingDownSight(AimingDownSightEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.AimingDownSight);
        private void OnBanned(BannedEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Banned);
        private void OnBanning(BanningEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Banning);
        private void OnCancellingItemUse(CancellingItemUseEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.CancellingItemUse);
        private void OnChangingGroup(ChangingGroupEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ChangingGroup);
        private void OnChangingIntercomMuteStatus(ChangingIntercomMuteStatusEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ChangingGroup);
        private void OnChangingItem(ChangingItemEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ChangingItem);
        private void OnChangingMicroHIDState(ChangingMicroHIDStateEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ChangingMicroHIDState);
        private void OnChangingMoveState(ChangingMoveStateEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ChangingMoveState);
        private void OnChangingMuteStatus(ChangingMuteStatusEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ChangingMuteStatus);
        private void OnChangingRadioPreset(ChangingRadioPresetEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ChangingRadioPreset);
        private void OnChangingRole(ChangingRoleEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ChangingRole);
        private void OnChangingSpectatedPlayer(ChangingSpectatedPlayerEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ChangingSpectatedPlayer);
        private void OnClosingGenerator(ClosingGeneratorEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ClosingGenerator);
        private void OnDamagingShootingTarget(DamagingShootingTargetEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.DamagingShootingTarget);
        private void OnDeactivatingWorkstation(DeactivatingWorkstationEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.DeactivatingWorkstation);
        private void OnDestroying(DestroyingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Destroying);
        private void OnDied(DiedEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Died);
        private void OnDroppingAmmo(DroppingAmmoEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.DroppingAmmo);
        private void OnDroppingItem(DroppingItemEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.DroppingItem);
        private void OnDroppingNull(DroppingNullEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.DroppingNull);
        private void OnDryfiringWeapon(DryfiringWeaponEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.DryfiringWeapon);
        private void OnDying(DyingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Dying);
        private void OnEnteringFemurBreaker(EnteringFemurBreakerEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.EnteringFemurBreaker);
        private void OnEnteringPocketDimension(EnteringPocketDimensionEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.EnteringPocketDimension);
        private void OnEscaping(EscapingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Escaping);
        private void OnEscapingPocketDimension(EscapingPocketDimensionEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.EscapingPocketDimension);
        private void OnFailingEscapingPocketDimension(FailingEscapePocketDimensionEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.FailingEscapePocketDimension);
        private void OnFlippingCoin(FlippingCoinEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.FlippingCoin);
        private void OnHandcuffing(HandcuffingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Handcuffing);
        private void OnHurting(HurtingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Hurting);
        private void OnInteracted(InteractedEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Interacted);
        private void OnInteractingDoor(InteractingDoorEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.InteractingDoor);
        private void OnInteractingElevator(InteractingElevatorEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.InteractingElevator);
        private void OnInteractingLocker(InteractingLockerEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.InteractingLocker);
        private void OnInteractingScp330(InteractingScp330EventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.InteractingScp330);
        private void OnInteractingShootingTarget(InteractingShootingTargetEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.InteractingShootingTarget);
        private void OnIntercomSpeaking(IntercomSpeakingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.IntercomSpeaking);
        private void OnJoined(JoinedEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Joined);
        private void OnJumping(JumpingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Jumping);
        private void OnKicked(KickedEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Kicked);
        private void OnKicking(KickingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Kicking);
        private void OnLanding(LandingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Landing);
        private void OnLeft(LeftEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Left);
        private void OnMakingNoise(MakingNoiseEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.MakingNoise);
        private void OnOpeningGenerator(OpeningGeneratorEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.OpeningGenerator);
        private void OnPickingUpAmmo(PickingUpAmmoEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.PickingUpAmmo);
        private void OnPickingUpArmor(PickingUpArmorEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.PickingUpArmor);
        private void OnPickingUpItem(PickingUpItemEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.PickingUpItem);
        private void OnPickingUpScp330(PickingUpScp330EventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.PickingUpScp330);
        private void OnPlayerDamageWindow(DamagingWindowEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.PlayerDamageWindow);
        private void OnPreAuthenticating(PreAuthenticatingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.PreAuthenticating);
        private void OnProcessingHotkey(ProcessingHotkeyEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ProcessingHotkey);
        private void OnReceivingEffect(ReceivingEffectEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ReceivingEffect);
        private void OnReloadingWeapon(ReloadingWeaponEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ReloadingWeapon);
        private void OnRemovingHandcuffs(RemovingHandcuffsEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.RemovingHandcuffs);
        private void OnSearchingPickup(SearchingPickupEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.SearchingPickup);
        private void OnShooting(ShootingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Shooting);
        private void OnShot(ShotEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Shot);
        private void OnSpawned(SpawnedEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Spawned);
        private void OnSpawning(SpawningEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Spawning);
        private void OnSpawningRagdoll(SpawningRagdollEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.SpawningRagdoll);
        private void OnStoppingGenerator(StoppingGeneratorEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.StoppingGenerator);
        private void OnThrowingItem(ThrowingItemEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ThrowingItem);
        private void OnToggleFlashlight(TogglingFlashlightEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.ToggleFlashlight);
        private void OnTogglingNoClip(TogglingNoClipEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.TogglingNoClip);
        private void OnTogglingWeaponFlashlight(TogglingWeaponFlashlightEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.TogglingWeaponFlashlight);
        private void OnTransmitting(TransmittingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Transmitting);
        private void OnTriggeringTesla(TriggeringTeslaEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.TriggeringTesla);
        private void OnUnloadingWeapon(UnloadingWeaponEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.UnloadingWeapon);
        private void OnUnlockingGenerator(UnlockingGeneratorEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.UnlockingGenerator);
        private void OnUsedItem(UsedItemEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.UsedItem);
        private void OnUsingItem(UsingItemEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.UsingItem);
        private void OnUsingMicroHIDEnergy(UsingMicroHIDEnergyEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.UsingMicroHIDEnergy);
        private void OnUsingRadioBattery(UsingRadioBatteryEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.UsingRadioBattery);
        private void OnVerified(VerifiedEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.Verified);
        private void OnVoiceChatting(VoiceChattingEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.VoiceChatting);
        private void OnWalkingOnSinkhole(WalkingOnSinkholeEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.WalkingOnSinkhole);
        private void OnWalkingOnTantrum(WalkingOnTantrumEventArgs e) => _announcements.TryAnnouncePlayer(PlayerEventType.WalkingOnTantrum);
    }
}
